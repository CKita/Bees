model.sub.sensi.alav.out <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = sub.sensi.alav.out)
summary(model.sub.sensi.alav.out)
let <- read.csv("lethal.csv", h= T, dec =".", sep = ",")
model.let <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = let)
summary(model.let)
View(let)
setwd("C:/Users/Cristina/Desktop/analyses_Cristina/survival")
dat <- read.csv("dados_sobrevivencia.csv", h= T, dec =".", sep = ",")
View(dat)
#abrindo o pacote necessario
library(metafor)
effects_t <- escalc("OR", dat$ai,dat$bi, dat$ci, dat$di, dat$n1i, dat$n2i)
View(effects_t)
dat_comp <- cbind(dat, effects_t)
View(dat_comp)
write.csv(dat_comp, "data_comp_2.csv", row.names = F)
dados <- read.table("data_comp.csv", h=T, dec=",", sep = ";")
library(scales)
library(ape)
library(rotl)
spp <- tnrs_match_names(unique(dados$bee_specie), context_name = "Animals") #aqui para procurar os nomes das minhas spp de abelhas
my_tree = tol_induced_subtree(ott_ids=spp$ott_id) #aqui estou criando uma sub arvore com as minhas especies de abelhas
#daqui para baixo estou vendos as distancias filogeneticas e criando a matriz de covariancia
otl_tips=strip_ott_ids(my_tree$tip.label, remove_underscores=TRUE)
taxon_map=structure(spp$search_string, names=spp$unique_name)
my_tree$tip.label=taxon_map[otl_tips]
my_tree.ult = compute.brlen(my_tree, method = "Grafen")
plot(my_tree.ult,no.margin=T) #vamos ver como ficou
cov.matrix = vcv(my_tree.ult,corr=T)
cov.matrix[,0]
library(metafor)
survival <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|bee_specie, ~1|agrochemical, ~1|hours_after_exposure, ~1|exposure_type), method="REML",  # "REML" = multi-level
R = list(bee_specie = cov.matrix),digits = 3, data = dados)   #aqui que entra a matriz de covariancia filogenetica
summary(survival)
orchard_plot(survival, xlab = "Odds ratio") +
labs(y = "Survival") +
scale_color_manual(values = "slateblue1") +
scale_fill_manual(values = "yellow") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.x = element_blank(),
legend.position = "top") +
coord_flip()
dados$wi <- 1/sqrt(dados$vi) # precision = 1 / standard error of effect size (Equation 20; Nakagawa & Santos 2012)
s2m.0 <- sum(dados$wi*(length(dados$wi)-1))/(sum(dados$wi)^2-sum(dados$wi^2)) # Equation 22
I2.survival <- ((survival$sigma2[1] + survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5])/ #[1] porque eu tenho o fator aleatorio id_code e [2] pq tem o fator aleatoria bee_specie.
(survival$sigma2[1] + survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5] + s2m.0)) * 100
I2.survival #heterogeneidade media
I2.survival - qchisq(.95, df=1)/2; I2.survival + qchisq(.95, df=1)/2
I2.study.bee <- ((survival$sigma2[1])/(
survival$sigma2[1]+ survival$sigma2[2] +  survival$sigma2[3]  +  survival$sigma2[4] + survival$sigma2[5] +
s2m.0)) * 100
I2.study.bee
I2.study.bee - qchisq(.95, df=1)/2; I2.study.bee + qchisq(.95, df=1)/2
I2.bee <- ((survival$sigma2[2])/(
survival$sigma2[1]+ survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5] +
s2m.0)) * 100
I2.bee
## and 95% CI for I2.paper:
I2.bee - qchisq(.95, df=1)/2; I2.bee + qchisq(.95, df=1)/2
#--- agrochemical ---
I2.agro<- ((survival$sigma2[3])/(
survival$sigma2[1]+survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5] +
s2m.0)) * 100
I2.agro
## and 95% CI for I2.paper:
I2.agro - qchisq(.95, df=1)/2; I2.agro + qchisq(.95, df=1)/2
I2.hours<- ((survival$sigma2[4])/(
survival$sigma2[1]+survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5] +
s2m.0)) * 100
I2.hours
## and 95% CI for I2.paper:
I2.hours - qchisq(.95, df=1)/2; I2.hours + qchisq(.95, df=1)/2
I2.exp<- ((survival$sigma2[5])/(
survival$sigma2[1]+survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5] +
s2m.0)) * 100
I2.exp
## and 95% CI for I2.paper:
I2.exp - qchisq(.95, df=1)/2; I2.exp + qchisq(.95, df=1)/2
confint(survival)
eggsm3 = lm(residuals(survival)~sqrt(dados$vi))
summary(eggsm3) #tem vies de publicacao pq o intercepto deu diferente de zero e deu significativo
plot(eggsm3)
confint.lm(eggsm3, level = 0.95)
rs= rstandard(survival) #para ver se tem outliers
hat= hatvalues(survival)/mean(hatvalues(survival))#para ver se tem pontos com alta alavancagem
plot(hat, rs$resid, ylim = c(-8.0,8), xlim =c(-5,5))
text(hat, rs$resid, labels = sub$id_code, cex= 1, pos = 2)
abline(h = -3)
abline(h = 3)
abline( v = 2)
sub.sensi.alav <- read.csv("survival_sensi_out.csv", h= T, dec =".", sep = ",")
surv_sensi<- read.csv("survival_sensi_out.csv", h= T, dec =".", sep = ",")
View(surv_sensi)
model.surv.sensi.out <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|bee_specie, ~1|agrochemical, ~1|hours_after_exposure, ~1|exposure_type), method="REML",  # "REML" = multi-level
R = list(bee_specie = cov.matrix),digits = 3, data = surv_sensi)
model.surv.sensi.out <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|bee_specie, ~1|agrochemical, ~1|hours_after_exposure, ~1|exposure_type), method="REML",  # "REML" = multi-level
R = list(bee_specie = cov.matrix),digits = 3, control = list(optimizer="optim", optmethod="Nelder-Mead"), data = surv_sensi)
summary(model.sub.sensi.alav)
summary(model.surv.sensi.out)
orchard_plot(model.surv.sensi.out, xlab = "Odds ratio") +
labs(y = "Survival") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip()
orchard_plot(model.geral, xlab = "Hedges' g") +
labs(y = "Overall effect") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip() #para colocar a variavel resposta no y
orchard_plot(model.1f, mod = "pesticide_effect", xlab = "Hedges' g") +
labs(y = " ") +
scale_fill_manual(values = c( "slateblue1", "sienna1")) +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
legend.position = "top") +
coord_flip() +
scale_y_discrete(labels = c("Lethal", "Sublethal"))
orchard_plot(survival, xlab = "Odds ratio") +
labs(y = "Survival") +
scale_color_manual(values = "slateblue1") +
scale_fill_manual(values = "yellow") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.x = element_blank(),
legend.position = "top") +
coord_flip()
orchard_plot(survival, xlab = "Odds ratio") +
labs(y = "Survival") +
scale_color_manual(values = "slateblue1") +
scale_fill_manual(values = "yellow") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.x = element_blank(),
legend.position = "top") +
coord_flip()
orchard_plot(survival, xlab = "Odds ratio") +
labs(y = "Survival") +
scale_color_manual(values = "slateblue1") +
scale_fill_manual(values = "yellow") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.x = element_blank(),
legend.position = "top") +
coord_flip()
setwd("C:/Users/Cristina/Desktop/dados corrigidos")
#carregadndo os dados
AG_cat <- read.csv("cat.csv", h=T, dec = ",")
summary(AG_cat)
for (i in 4:10){
AG_cat[ ,i] <- as.numeric(AG_cat[,i] )
}
summary(AG_cat)
effect_sizes <- escalc("SMD", m1i = mean_treatment, m2i = mean_control,
sd1i = sd_treatment, sd2i= sd_control,
n1i=sample_size_treatment, n2i= sample_size_control,
data = AG_cat)
write.csv(effect_sizes, "just_effect_sizes_cat.csv", row.names = F)
d_brutos <- read.csv("planilha_bruta.csv", h =T, dec= ",")
C0142_BRUTO <- d_brutos[d_brutos$id_code == "C0142", ]
C0142_BRUTO$value[1]<- 0.62
C0142_BRUTO$value <- as.numeric(C0142_BRUTO$value)
C0142_BRUTO$value
library("compute.es")
effect_c0142 <- fes(C0142_BRUTO$value, C0142_BRUTO$sample_size_control, C0142_BRUTO$sample_size_treatment)
es_f_d_var <- cbind(effect_c0142$d, effect_c0142$var.d) #pegando as colunas que me interessam
colnames(es_f_d_var) <- c("yi", "vi") #nomeando
C0142_stat <- cbind (C0142_BRUTO$id_code, C0142_BRUTO$study_type, C0142_BRUTO$nature_x,
C0142_BRUTO$total_sample_size , C0142_BRUTO$sample_size_control,
C0142_BRUTO$sample_size_treatment, C0142_BRUTO$statistic, C0142_BRUTO$value)
colnames(C0142_stat) <- c("id_code", "study_type", "nature_x", "total_sample_size", "sample_size_control", "sample_size_treatment", "statistic", "value")
effect_type <- as.data.frame(rep("community", 2))
plant_specie <- as.data.frame(rep("", 2))
colnames(effect_type) <- "effect_type"
colnames(plant_specie) <- "plant_specie"
ef_plant <- cbind(effect_type, plant_specie)
pronto <- cbind(es_F_prontos, ef_plant)
for (i in 4:6){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
for (i in 8:10){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
es_F_prontos <- cbind(C0142_stat, es_f_d_var) #juntando os tamanhos de efeito com os outros dados
effect_type <- as.data.frame(rep("community", 2))
colnames(effect_type) <- "effect_type"
colnames(plant_specie) <- "plant_specie"
ef_plant <- cbind(effect_type, plant_specie)
for (i in 4:6){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
pronto <- cbind(es_F_prontos, ef_plant)
for (i in 4:6){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
for (i in 8:10){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
effects_prontos <- dplyr::bind_rows( effect_sizes, pronto)
write.csv(effects_prontos, "effect_sizes_cat.csv", row.names = F)
View(effects_prontos)
setwd("C:/Users/Cristina/Desktop/analise_dados_meta/survival")
dat <- read.csv("dados_sobrevivencia.csv", h= T, dec =".", sep = ",")
#abrindo o pacote necessario
library(metafor)
effects_t <- escalc("OR", dat$ai,dat$bi, dat$ci, dat$di, dat$n1i, dat$n2i)
View(effects_t)
dat_comp <- cbind(dat, effects_t)
#salvando
write.csv2(dat_comp, "data_comp.csv", row.names = F) #estou salvando assim para fazer a matriz de covariancia filogenetica
write.csv(dat_comp, "data_comp_2.csv", row.names = F)
dados <- read.table("data_comp.csv", h=T, dec=",", sep = ";")
library(scales)
library(ape)
library(rotl)
spp <- tnrs_match_names(unique(dados$bee_specie), context_name = "Animals") #aqui para procurar os nomes das minhas spp de abelhas
my_tree = tol_induced_subtree(ott_ids=spp$ott_id) #aqui estou criando uma sub arvore com as minhas especies de abelhas
#daqui para baixo estou vendos as distancias filogeneticas e criando a matriz de covariancia
otl_tips=strip_ott_ids(my_tree$tip.label, remove_underscores=TRUE)
taxon_map=structure(spp$search_string, names=spp$unique_name)
my_tree$tip.label=taxon_map[otl_tips]
my_tree.ult = compute.brlen(my_tree, method = "Grafen")
cov.matrix = vcv(my_tree.ult,corr=T)
cov.matrix[,0]
library(metafor)
survival <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|bee_specie, ~1|agrochemical, ~1|hours_after_exposure, ~1|exposure_type), method="REML",  # "REML" = multi-level
R = list(bee_specie = cov.matrix),digits = 3, data = dados)   #aqui que entra a matriz de covariancia filogenetica
summary(survival)
rs= rstandard(survival) #para ver se tem outliers
hat= hatvalues(survival)/mean(hatvalues(survival))#para ver se tem pontos com alta alavancagem
plot(hat, rs$resid, ylim = c(-8.0,8), xlim =c(-5,5))
text(hat, rs$resid, labels = sub$id_code, cex= 1, pos = 2)
abline(h = -3)
abline(h = 3)
abline( v = 2)
plot(hat, rs$resid, ylim = c(-8.0,8), xlim =c(-5,5))
abline(h = -3)
abline(h = 3)
abline( v = 2)
rs= rstandard(survival) #para ver se tem outliers
hat= hatvalues(survival)/mean(hatvalues(survival))#para ver se tem pontos com alta alavancagem
plot(hat, rs$resid, ylim = c(-8.0,8), xlim =c(-5,5))
text(hat, rs$resid, labels = sub$id_code, cex= 1, pos = 2)
abline(h = -3)
abline(h = 3)
abline( v = 2)
orchard_plot(survival, xlab = "Odds ratio") +
labs(y = "Survival") +
scale_color_manual(values = "slateblue1") +
scale_fill_manual(values = "yellow") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.x = element_blank(),
legend.position = "top") +
coord_flip()
surv_sensi<- read.csv("survival_sensi_out.csv", h= T, dec =".", sep = ",")
model.surv.sensi.out <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|bee_specie, ~1|agrochemical, ~1|hours_after_exposure, ~1|exposure_type), method="REML",  # "REML" = multi-level
R = list(bee_specie = cov.matrix),digits = 3, control = list(optimizer="optim", optmethod="Nelder-Mead"), data = surv_sensi)
summary(model.surv.sensi.out)
orchard_plot(model.surv.sensi.out, xlab = "Odds ratio") +
labs(y = "Survival") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip()
dados$wi <- 1/sqrt(dados$vi) # precision = 1 / standard error of effect size (Equation 20; Nakagawa & Santos 2012)
s2m.0 <- sum(dados$wi*(length(dados$wi)-1))/(sum(dados$wi)^2-sum(dados$wi^2)) # Equation 22
I2.survival <- ((survival$sigma2[1] + survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5])/ #[1] porque eu tenho o fator aleatorio id_code e [2] pq tem o fator aleatoria bee_specie.
(survival$sigma2[1] + survival$sigma2[2] +  survival$sigma2[3] + survival$sigma2[4] + survival$sigma2[5] + s2m.0)) * 100
I2.survival #heterogeneidade media
I2.survival - qchisq(.95, df=1)/2; I2.survival + qchisq(.95, df=1)/2
setwd("C:/Users/Cristina/Desktop/analise_dados_meta/letal e subletal")
dados_completos <- read.csv("let_sublet.csv", h= T, dec =".", sep = ",")
dados_completos$nature_x <- as.factor(dados_completos$nature_x)
dados_completos$study_type <- as.factor(dados_completos$study_type)
dados_completos$effect_type <- as.factor(dados_completos$effect_type)
dados_completos$pesticide_effect <- as.factor(dados_completos$pesticide_effect)
table(dados_completos$pesticide_effect)
table(dados_completos$study_type)
model.geral <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = dados_completos)
summary(model.geral)
orchard_plot(model.geral, xlab = "Hedges' g") +
labs(y = "Overall effect") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip() #para colocar a variavel resposta no y
dados_completos$wi <- 1/sqrt(dados_completos$vi) # precision = 1 / standard error of effect size (Equation 20; Nakagawa & Santos 2012)
s2m.0 <- sum(dados_completos$wi*(length(dados_completos$wi)-1))/(sum(dados_completos$wi)^2-sum(dados_completos$wi^2)) # Equation 22
I2.model.g <- ((model.geral$sigma2[1] + model.geral$sigma2[2] + model.geral$sigma2[3] ))/
(model.geral$sigma2[1]+  model.geral$sigma2[2] + model.geral$sigma2[3] +s2m.0) * 100
I2.model.g
## and 95% CI for I2.total:
I2.model.g - qchisq(.95, df=1)/2; I2.model.g + qchisq(.95, df=1)/2
model.1 <- rma.mv(yi, vi, mods= ~pesticide_effect, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = dados_completos)
summary(model.1)
model.1f <- rma.mv(yi, vi, mods = ~pesticide_effect -1, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = dados_completos)
summary(model.1f)
orchard_plot(model.1f, mod = "pesticide_effect", xlab = "Hedges' g") +
labs(y = " ") +
scale_fill_manual(values = c( "slateblue1", "sienna1")) +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
legend.position = "top") +
coord_flip() +
scale_y_discrete(labels = c("Lethal", "Sublethal"))
sub <- read.csv("sub.csv", h= T, dec =".", sep = ",")
model.sub <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = sub)
summary(model.sub)
orchard_plot(model.sub, xlab = "Hedges' g") +
labs(y = "Overall effect") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip()
rs= rstandard(model.sub) #para ver se tem outliers
hat= hatvalues(model.sub)/mean(hatvalues(model.sub))#para ver se tem pontos com alta alavancagem
plot(hat, rs$resid, ylim = c(-8.0,8), xlim =c(-5,5))
text(hat, rs$resid, labels = sub$id_code, cex= 1, pos = 2)
abline(h = -3)
abline(h = 3)
abline( v = 2)
sub.sensi.alav <- read.csv("sub_sensi_alav.csv", h= T, dec =".", sep = ",")
model.sub.sensi.alav <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = sub.sensi.alav)
orchard_plot(model.sub.sensi.alav, xlab = "Hedges' g") +
labs(y = "Overall effect") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip()
summary(model.sub.sensi.alav)
sub.sensi.out <- read.csv("sub_sensi_out.csv", h= T, dec =".", sep = ",")
model.sub.sensi.out <- rma.mv(yi, vi, random = list( ~1|id_code, ~1|study_type, ~1|sampling_method), method="REML",  # "REML" = multi-level
digits = 3, data = sub.sensi.out)
summary(model.sub.sensi.out)
orchard_plot(model.sub.sensi.out, xlab = "Hedges' g") +
labs(y = "Overall effect") + # troca o nome do eixo y
scale_color_manual(values = "pink1") + #troca a cor dos pontos do fundo
scale_fill_manual(values = "seagreen3") + #troca a cor do ponto central
theme_classic() + #tira a caixa em volta do grafico
theme(axis.text = element_text(size = 14, colour = "black"), #muda o tamanho do texto dos eixos e na cor do eixo
axis.title = element_text(size = 16), #muda o tamanho do titulo do eixo
axis.text.x = element_blank(), #Isso remove o texto automatico do eixo y
legend.position = "top") + #troca a posicao da legenda
coord_flip()
setwd("C:/Users/Cristina/Desktop/analise_dados_meta/letal e subletal/effect_sizes/categoricals")
#carregadndo os dados
AG_cat <- read.csv("cat.csv", h=T, dec = ",")
for (i in 4:10){
AG_cat[ ,i] <- as.numeric(AG_cat[,i] )
}
summary(AG_cat)
effect_sizes <- escalc("SMD", m1i = mean_treatment, m2i = mean_control,
sd1i = sd_treatment, sd2i= sd_control,
n1i=sample_size_treatment, n2i= sample_size_control,
data = AG_cat)
View(effect_sizes) #tamanho de efeito (yi) e variancia (vi)
d_brutos <- read.csv("planilha_bruta.csv", h =T, dec= ",")
C0142_BRUTO <- d_brutos[d_brutos$id_code == "C0142", ]
summary(C0142_BRUTO)
C0142_BRUTO$value[1]<- 0.62
C0142_BRUTO$value <- as.numeric(C0142_BRUTO$value)
effect_c0142 <- fes(C0142_BRUTO$value, C0142_BRUTO$sample_size_control, C0142_BRUTO$sample_size_treatment)
effect_c0142 <- fes(C0142_BRUTO$value, C0142_BRUTO$sample_size_control, C0142_BRUTO$sample_size_treatment)
es_f_d_var <- cbind(effect_c0142$d, effect_c0142$var.d) #pegando as colunas que me interessam
colnames(es_f_d_var) <- c("yi", "vi") #nomeando
es_f_d_var
C0142_stat <- cbind (C0142_BRUTO$id_code, C0142_BRUTO$study_type, C0142_BRUTO$nature_x,
C0142_BRUTO$total_sample_size , C0142_BRUTO$sample_size_control,
C0142_BRUTO$sample_size_treatment, C0142_BRUTO$statistic, C0142_BRUTO$value)
colnames(C0142_stat) <- c("id_code", "study_type", "nature_x", "total_sample_size", "sample_size_control", "sample_size_treatment", "statistic", "value")
es_F_prontos <- cbind(C0142_stat, es_f_d_var) #juntando os tamanhos de efeito com os outros dados
es_F_prontos
effect_type <- as.data.frame(rep("community", 2))
plant_specie <- as.data.frame(rep("", 2))
colnames(effect_type) <- "effect_type"
colnames(plant_specie) <- "plant_specie"
plant_specie
ef_plant <- cbind(effect_type, plant_specie)
pronto <- cbind(es_F_prontos, ef_plant)
for (i in 4:6){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
str(pronto)
for (i in 8:10){
pronto [ ,i] <- as.numeric(pronto[,i] )
}
effects_prontos <- dplyr::bind_rows( effect_sizes, pronto)
str(effects_prontos)
View(effects_prontos)
AG_cont <- read.csv("continuous.csv", h=T, dec = ",")
setwd("C:/Users/Cristina/Desktop/analise_dados_meta/letal e subletal/effect_sizes/continuous")
AG_cont <- read.csv("continuous.csv", h=T, dec = ",")
summary(AG_cont)
AG_cont$value <- as.numeric(AG_cont$value)
C0135_ <- AG_cont[AG_cont$id_code == "C0135", ]
C0135_ <- C0135_[c(1:9),]
C0135_
C0179_ <- AG_cont[AG_cont$id_code ==  "C0179", ]
#vamos juntar esses dados
C0135_C0179 <- rbind(C0135_, C0179_)
C0135_C0179
for (i in 4:6){
C0135_C0179 [ ,i] <- as.numeric(C0135_C0179[,i] )
}
C0135_C0179$value <- as.numeric(C0135_C0179$value)
summary(C0135_C0179)
es_f <- fes(C0135_C0179$value, C0135_C0179$sample_size_control, C0135_C0179$sample_size_treatment)
es_f_g_var <- cbind(es_f$g, es_f$var.g) #pegando as colunas que me interessam
colnames(es_f_g_var) <- c("yi", "vi") #nomeando
View(es_f_g_var)
es_F_prontos <- cbind(C0135_C0179, es_f_g_var) #juntando os tamanhos de efeito com os outros dados
View(es_F_prontos)
dado_t <- AG_cont[AG_cont$id_code == "C0143", ]
dado_t$sample_size_control <- as.numeric(dado_t$sample_size_control)
dado_t$sample_size_treatment <- as.numeric(dado_t$sample_size_treatment)
es_t <- tes(dado_t$value, dado_t$sample_size_control, dado_t$sample_size_treatment)
es_t_d_var <- cbind(es_t$g, es_t$var.g) #pegando as colunas que me interessam
es_t_d_var
colnames(es_t_d_var) <- c("yi", "vi") #nomeando as colunas
es_t_prontos <- cbind(dado_t, es_t_d_var) #juntando os tamanhos de efeito com os outros dados
dado_C0120 <- AG_cont[AG_cont$id_code == "C0120", ]
dado_C0135 <- AG_cont[AG_cont$id_code == "C0135", ]
dado_r <- rbind(dado_C0120, dado_C0135)
dado_r$total_sample_size <- as.numeric(dado_r$total_sample_size)
dado_r$sample_size_control <- as.numeric(dado_r$sample_size_control)
dado_r$sample_size_treatment <- as.numeric(dado_r$sample_size_treatment)
es_r <- res(dado_r$value, var.r = NULL, dado_r$total_sample_size)
es_r_d_var <- cbind(es_r$d, es_r$var.d) #pegando as colunas que me interessam
es_t_prontos <- cbind(dado_t, es_t_d_var) #juntando os tamanhos de efeito com os outros dados
AG_cont
dado_C0120 <- AG_cont[AG_cont$id_code == "C0120", ]
dado_C0135 <- AG_cont[AG_cont$id_code == "C0135", ]
dado_C0135 <- dado_C0135[c(10:12),]
dado_r <- rbind(dado_C0120, dado_C0135)
dado_r$total_sample_size <- as.numeric(dado_r$total_sample_size)
dado_r$sample_size_control <- as.numeric(dado_r$sample_size_control)
dado_r$sample_size_treatment <- as.numeric(dado_r$sample_size_treatment)
es_r <- res(dado_r$value, var.r = NULL, dado_r$total_sample_size)
es_r_d_var <- cbind(es_r$d, es_r$var.d) #pegando as colunas que me interessam
colnames(es_r_d_var) <- c("yi", "vi") #nomeando as colunas
as.data.frame(es_r_d_var) #tem que passar para hedges g
#pegando as informacoes necessarias para fazer a conversao
d <- es_r$d
vd <- es_r$var.d
#df= degrees of freedom, which is n1 +n2 - 2
df <- dado_r$total_sample_size - 2
j <- function(x){
1-3/(4*x-1)
}
Js <- j(df)
g <- function(y){
y*d
}
var.g <- function(z){
Js^2*vd
}
Var.g <- var.g(Js)
es_r_g_var.g <- cbind(G, Var.g)
G <- g(Js)
var.g <- function(z){
Js^2*vd
}
Var.g <- var.g(Js)
es_r_g_var.g <- cbind(G, Var.g)
colnames(es_r_g_var.g) <- c("yi", "vi")
es_r_g_var.g
es_r_prontos <- cbind(dado_r, es_r_g_var.g) #juntando os tamanhos de efeito com os outros dados
es_cont <- rbind(es_r_prontos, es_F_prontos, es_t_prontos )
es_cont <- es_cont[-18,] #vi que esse dado nao estava atrelado a polinzacao por abelhas
es_cont$yi[c(1,2,3,4,5,8,9,12,14,15,18)] <- es_cont$yi[c(1,2,3,4,5,8,9,12,14,15,18)] * -1
View(es_cont)
