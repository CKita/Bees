scale_color_manual(values = "blue") +
scale_fill_manual(values = "blue") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) + geom_point(size = 3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
scale_color_manual(values = "blue") +
scale_fill_manual(values = "blue") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) + geom_point(size = 3, alpha = 0.1) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
scale_color_manual(values = "blue") +
scale_fill_manual(values = "blue") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) + geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
scale_color_manual(values = "blue") +
scale_fill_manual(values = "blue") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) + geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
scale_color_manual("blue")
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
scale_color_manual("blue") +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3, color='darkblue') +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3, color='deepink') +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3, color="deeppink") +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3, color="cornflowerblue") +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3, color="deepblue") +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3, color="darkblue") +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
tiff("../Figures/publication_bias.tiff", units="in", width=5,
height=6, res=1200, compression = 'lzw')
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
dev.off()
setwd("C:/Users/Cristina/Desktop/desktop/Laura/Bees/Bees/Lethal effect/Data")
#Load or install the required packages.
if(!require(metafor)){
install.packages("metafor")
library(metafor)
}
if(!require(scales)){
install.packages("scales")
library(scales)
}
if(!require(ape)){
install.packages("ape")
library(ape)
}
if(!require(rotl)){
install.packages("rotl")
library(rotl)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(devtools)){
install.packages("devtools")
library(devtools)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(patchwork)){
install.packages("patchwork")
library(patchwork)
}
if(!require(R.rsp)){
install.packages("R.rsp")
library(R.rsp)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(Rtools42)){
install.packages("Rtools42")
library(Rtools42)
}
if(!require(Rtools42)){
install.packages("Rtools42")
library(Rtools42)
}
install.packages("Rtools42")
library(Rtools42)
#Now, let's import and check the data.
dat <- read.csv("../Data/lethal.csv", h= T, dec =".", sep = ",")
class(dat)
str(dat)
head(dat)
tail(dat)
#To calculate the effect sizes, we are going to use the "escalc" function.
#To calculate the bee survival probability, we are going to use odds ratio
#("OR") as a metric of effect size.
effects_t <- escalc("OR", dat$ai,dat$bi, dat$ci, dat$di, dat$n1i, dat$n2i)
head(effects_t)
#Now, let's bind the effect sizes with the raw data by columns.
dat_comp <- cbind(dat, effects_t)
head(dat_comp)
#Export the complete data set.
write.csv2(dat_comp, "../Data/data_comp.csv", row.names = F)
#We are going to build a meta-analytic model to calculate the mean effect size.
#Let's use the complete data set to build our model.
dados <- read.table("../Data/data_comp.csv", h=T, dec=",", sep = ";")
class(dados)
str(dados)
head(dados)
tail(dados)
#Considering that bee survival rate is correlated with life history, we are
# going to build a phylogenetic covariance matrix using the Interactive Tree
# of Life online tree generator database.
#Let's search for our bee species in the Tree of Life.
spp <- tnrs_match_names(unique(dados$bee_specie), context_name = "Animals")
spp
#Create a subtree with our bee species.
my_tree = tol_induced_subtree(ott_ids=spp$ott_id)
class(my_tree)
str(my_tree)
my_tree
#Now calculate the phylogenetic distances and build the covariance matrix.
otl_tips=strip_ott_ids(my_tree$tip.label, remove_underscores=TRUE)
taxon_map=structure(spp$search_string, names=spp$unique_name)
my_tree$tip.label=taxon_map[otl_tips]
my_tree.ult = compute.brlen(my_tree, method = "Grafen")
plot(my_tree.ult,no.margin=T) #let's see
cov.matrix = vcv(my_tree.ult,corr=T)
cov.matrix[,0]
#Now we'll build a meta-analytic mixed-effects model.
#We'll use the function rma.mv from the metafor package because of the
#non-independence of our data.
lethal <- rma.mv(yi, vi, random = list( ~1|id_code,
~1|bee_specie,
~1|agrochemical,
~1|hours_after_exposure,
~1|exposure_type),
method="REML",  #"REML" = multi-level
R = list(bee_specie = cov.matrix),digits = 3, data = dados)
summary(lethal)
orchaRd::orchard_plot(lethal, data= dados,
group = "id_code", xlab = "Odds ratio", branch.size = 1.4,
trunk.size = 8) +
labs(x = "Lethal effect") +
scale_fill_manual(values="slateblue1") +
scale_colour_manual(values="slateblue1")+
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.y = element_blank(),
legend.position = "top")
#So, the effect sizes C0073, C0084, C0189 and C0191 are outliers
# (28 effect sizes).
#Let's run a new model without them.
let_sensi<- read.csv("../Data/let_sensi_out.csv",
h= T, dec =".", sep = ",") #data frame without outliers
head(let_sensi)
#Build a covariance matrix using only the bee species of our data set
#without outliers.
spp <- tnrs_match_names(unique(let_sensi$bee_specie),
context_name = "Animals")
my_tree = tol_induced_subtree(ott_ids=spp$ott_id)
otl_tips=strip_ott_ids(my_tree$tip.label, remove_underscores=TRUE)
taxon_map=structure(spp$search_string, names=spp$unique_name)
my_tree$tip.label=taxon_map[otl_tips]
my_tree.ult = compute.brlen(my_tree, method = "Grafen")
plot(my_tree.ult,no.margin=T)
cov.matrix = vcv(my_tree.ult,corr=T)
cov.matrix[,0]
#Run the new model without the outliers.
model.let.sensi.out <- rma.mv(yi, vi,
random = list( ~1|id_code,
~1|bee_specie,
~1|agrochemical,
~1|hours_after_exposure,
~1|exposure_type),
method="REML",  # "REML" = multi-level
R = list(bee_specie = cov.matrix),
digits = 3,
control = list(optimizer="optim",
optmethod="Nelder-Mead"),
data = let_sensi)
summary(model.let.sensi.out)
orchaRd::orchard_plot(model.let.sensi.out, data= let_sensi,
group = "id_code", xlab = "Odds ratio", branch.size = 1.4,
trunk.size = 8) +
labs(x = "Lethal effect") +
scale_fill_manual(values="slateblue1") +
scale_colour_manual(values="slateblue1")+
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.y = element_blank(),
legend.position = "top")
#Now, we'll calculate the heterogeneity of the model and the heterogeneity of
#each random variable, using the IÂ² statistic with a 95% confidence interval (CI).
dados$wi <- 1/sqrt(dados$vi)
#precision = 1 / standard error of effect size (Equation 20; Nakagawa & Santos 2012)
s2m.0 <- sum(dados$wi*(length(dados$wi)-1))/(sum(dados$wi)^2-sum(dados$wi^2)) # Equation 22
#Calculate the total heterogeneity. In other words, the heterogeneity that is
#explained by our model including predictor and response variables.
I2.lethal <- ((lethal$sigma2[1] + lethal$sigma2[2] +
lethal$sigma2[3] + lethal$sigma2[4] +
lethal$sigma2[5])/
(lethal$sigma2[1] + lethal$sigma2[2] +
lethal$sigma2[3] + lethal$sigma2[4] +
lethal$sigma2[5] + s2m.0)) * 100
#The values of heterogeneity 25%, 50%, and 75% are considered small, medium,
#and high, respectively, as suggested by Higgins (2003).
I2.lethal #mean
##95% CI for I2.total:
I2.lethal - qchisq(.95, df=1)/2; I2.lethal + qchisq(.95, df=1)/2
#Calculating IÂ² for each random factor
#--- study ID ---
I2.study.bee <- ((lethal$sigma2[1])/(
lethal$sigma2[1]+ lethal$sigma2[2] +  lethal$sigma2[3]  +
lethal$sigma2[4] +
lethal$sigma2[5] +
s2m.0)) * 100
I2.study.bee
##95% CI for I2.study.bee:
I2.study.bee - qchisq(.95, df=1)/2; I2.study.bee + qchisq(.95, df=1)/2
#--- bee_specie ---
I2.bee <- ((lethal$sigma2[2])/(
lethal$sigma2[1]+ lethal$sigma2[2] +  lethal$sigma2[3] +
lethal$sigma2[4] + lethal$sigma2[5] +
s2m.0)) * 100
I2.bee
##and 95% CI for I2.bee:
I2.bee - qchisq(.95, df=1)/2; I2.bee + qchisq(.95, df=1)/2
#--- agrochemical ---
I2.agro<- ((lethal$sigma2[3])/(
lethal$sigma2[1]+lethal$sigma2[2] +  lethal$sigma2[3] +
lethal$sigma2[4] + lethal$sigma2[5] +
s2m.0)) * 100
I2.agro
##95% CI for I2.agro:
I2.agro - qchisq(.95, df=1)/2; I2.agro + qchisq(.95, df=1)/2
#----hours ---
I2.hours<- ((lethal$sigma2[4])/(
lethal$sigma2[1]+lethal$sigma2[2] + lethal$sigma2[3]
+ lethal$sigma2[4] + lethal$sigma2[5] +
s2m.0)) * 100
I2.hours
## 95% CI for I2.hours:
I2.hours - qchisq(.95, df=1)/2; I2.hours + qchisq(.95, df=1)/2
#---exposure type ---
I2.exp<- ((lethal$sigma2[5])/(
lethal$sigma2[1]+lethal$sigma2[2] +  lethal$sigma2[3]
+ lethal$sigma2[4] + lethal$sigma2[5] +
s2m.0)) * 100
I2.exp
## 95% CI for I2.exp:
I2.exp - qchisq(.95, df=1)/2; I2.exp + qchisq(.95, df=1)/2
#Confidence intervals for sigma2.
confint(lethal)
#Publication bias in each model using an adapted version of Eggerâs regression
#(Nakagawa & Santos, 2012). A publication bias is pointed out when the
#intercept of the regression significantly deviates from zero
eggsm3 = lm(residuals(lethal)~sqrt(dados$vi))
summary(eggsm3)
confint.lm(eggsm3, level = 0.95)
model.residuals <- residuals(model.sub) #model residuals
effect.sizes.vi<- sqrt(sub$vi) #variances of each effect size (vi)
bias <- cbind(model.residuals, effect.sizes.vi)
bias <- as.data.frame(bias)
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
#Publication bias in each model using an adapted version of Eggerâs regression
#(Nakagawa & Santos, 2012). A publication bias is pointed out when the
#intercept of the regression significantly deviates from zero
eggsm3 = lm(residuals(lethal)~sqrt(dados$vi))
summary(eggsm3)
confint.lm(eggsm3, level = 0.95)
model.residuals <- residuals(lethal) #model residuals
effect.sizes.vi<- sqrt(dados$vi) #variances of each effect size (vi)
bias <- cbind(model.residuals, effect.sizes.vi)
bias <- as.data.frame(bias)
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
tiff("../Figures/publication_bias.tiff", units="in", width=5,
height=6, res=1200, compression = 'lzw')
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
dev.off()
setwd("C:/Users/Cristina/Desktop/desktop/Laura/Bees/Bees/Consequences of lethal and sublethal effects/Data")
#Load or install the required packages
if(!require(metafor)){
install.packages("metafor")
library(metafor)
}
if(!require(orchaRd)){
devtools::install_github("daniel1noble/orchaRd", force = TRUE)
library(orchaRd)
}
if(!require(devtools)){
install.packages("devtools")
library(devtools)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
if(!require(patchwork)){
install.packages("patchwork")
library(patchwork)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
n
conseq <- read.csv("../Data/consequences.csv", h= T, dec =".", sep = ",")
class(conseq)
str(conseq)
head(conseq)
tail(conseq)
conseq$study_type <- as.factor(conseq$study_type)
conseq$nature_x <- as.factor(conseq$nature_x)
conseq$effect_type <- as.factor(conseq$effect_type)
conseq$farm_type <- as.factor(conseq$farm_type)
model.conseq <- rma.mv(yi, vi,
random = list( ~1|id_code, ~1|sampling_method,
~1|farm_type),
method="REML",  # "REML" = multi-level
control = list(optimizer="optim", optmethod="Nelder-Mead"),
digits = 3, data = conseq)
summary(model.conseq)
orchaRd::orchard_plot(model.conseq, xlab = "Hedges' g", data = conseq,
group = "id_code", branch.size = 1.4,
trunk.size = 8 ) +
labs(x = "Consequences of lethal and sublethal effects" ) +
scale_fill_manual(values = c( "#00A087B2", "sienna1")) +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.y = element_blank(),
legend.position = "top")
tiff("../Figures/consequences_let_sub.tiff", units="in",
width=6, height=6, res=1200, compression = 'lzw')
orchaRd::orchard_plot(model.conseq, xlab = "Hedges' g", data = conseq,
group = "id_code", branch.size = 1.4,
trunk.size = 8 ) +
labs(x = "Consequences of lethal and sublethal effects" ) +
scale_fill_manual(values = c( "#00A087B2", "sienna1")) +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16),
axis.text.y = element_blank(),
legend.position = "top")
dev.off()
conseq$wi <- 1/sqrt(conseq$vi)
s2m.0 <- sum(conseq$wi*(length(conseq$wi)-1))/
(sum(conseq$wi)^2-sum(conseq$wi^2)) # Equation 22
#Let's calculate the total heterogeneity. In other words, the heterogeneity
#that is explained by our model including predictor and response variables.
I2.conseq <- ((model.conseq$sigma2[1] + model.conseq$sigma2[2] +
model.conseq$sigma2[3] ))/
(model.conseq$sigma2[1]+  model.conseq$sigma2[2] +
model.conseq$sigma2[3]  +s2m.0) * 100
I2.conseq #mean
## and 95% CI for I2.total:
I2.conseq - qchisq(.95, df=1)/2; I2.conseq + qchisq(.95, df=1)/2
#--- ID code ---
I2.id <- ((model.conseq$sigma2[1])/
(model.conseq$sigma2[1] +
model.conseq$sigma2[2] + model.conseq$sigma2[3] +
s2m.0)) * 100
I2.id
## and 95% CI for I2.id:
I2.id - qchisq(.95, df=1)/2; I2.id + qchisq(.95, df=1)/2
#--- sampling method ---
I2.sampling <- ((model.conseq$sigma2[2])/
(model.conseq$sigma2[1] +
model.conseq$sigma2[2] + model.conseq$sigma2[3] +
s2m.0)) * 100
I2.sampling
## and 95% CI for I2.study:
I2.sampling - qchisq(.95, df=1)/2; I2.sampling + qchisq(.95, df=1)/2
#--- farm type ---
I2.farm <-  ((model.conseq$sigma2[3])/
(model.conseq$sigma2[1] +
model.conseq$sigma2[2] + model.conseq$sigma2[3] +
s2m.0)) * 100
I2.farm
## and 95% CI for I2.sampling:
I2.farm - qchisq(.95, df=1)/2; I2.farm + qchisq(.95, df=1)/2
#confidence intervals for sigma2
confint(model.conseq)
egger = lm(residuals(model.conseq)~sqrt(conseq$vi))
summary(egger)
confint.lm(egger, level = 0.95)
model.residuals <- residuals(model.conseq) #model residuals
effect.sizes.vi <- sqrt(conseq$vi) #variances of each effect size (vi)
bias <- cbind(model.residuals, effect.sizes.vi)
bias <- as.data.frame(bias)
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
tiff("../Figures/publication_bias.tiff", units="in", width=5,
height=6, res=1200, compression = 'lzw')
ggplot(bias, aes(effect.sizes.vi, model.residuals)) +
geom_point(size = 3, alpha = 0.3) +
geom_hline(yintercept= 0.0,linetype=2) +
labs(x="Standard Error", y="Residual Value") +
theme_classic() +
theme(axis.text = element_text(size = 14, colour = "black"),
axis.title = element_text(size = 16))
dev.off()
