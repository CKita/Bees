tail(sites)
View(sites)
# First, let's import and check our data set.
sites <- read.csv("../Data/sites.csv", h= T, sep = ";")
class(sites)
str(sites)
head(sites)
tail(sites)
View(sites)
# First, let's import and check our data set.
sites <- read.csv("../Data/sites.csv", h= T, sep = ";")
class(sites)
str(sites)
head(sites)
tail(sites)
#Now, select the columns with the coordinates and study type.
sites_short <- sites %>%
dplyr::select(Latitude, Longitude, StudyType)
#Check the data.
head(sites_short)
#Load the world map from the mapdata package
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
#Plot the base map.
g1 <- ggplot(data = world) +
geom_sf(colour = "white", fill = "lightgray") +
coord_sf(xlim = c(-180, 180), ylim = c(-58,90), expand = FALSE) +
theme_bw() +
#Plot the sites
geom_point(data = sites_short, aes(x = Longitude, y = Latitude,
colour = StudyType),
alpha = 0.5, size = 2) +
#Customize the colors and labels
scale_color_manual(values = c("sienna1",  "#00A087B2", "slateblue1" )) +
labs(colour = "Study type", x = "Longitude", y = "Latitude") +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 13, colour = "black"),
axis.title.x = element_text(size = 13, colour= "black", vjust= -4,
face = "bold"),
axis.title.y = element_text(size = 13, colour= "black", vjust = 3,
face = "bold"),
legend.position = c(0.15,0.3),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(fill = "NA"),
plot.margin = unit(rep(0.5,4), "lines")) +
#Add a scale bar
ggspatial::annotation_scale(
location = "bl", width_hint = 0.3,
bar_cols = c("grey30", "white")) +
# Add a north arrow
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(
fill = c("white","grey30")))
#Check the map.
g1
#Export the map as PNG image.
png("../Figure/study sites.png", res = 300,
width = 4000, height = 2000, unit = "px")
g1
dev.off()
#Plot the base map.
g1 <- ggplot(data = world) +
geom_sf(colour = "white", fill = "lightgray") +
coord_sf(xlim = c(-180, 180), ylim = c(-58,90), expand = FALSE) +
theme_bw() +
#Plot the sites
geom_point(data = sites_short, aes(x = Longitude, y = Latitude,
colour = StudyType),
alpha = 0.5, size = 2) +
#Customize the colors and labels
scale_color_manual(values = c("sienna1",  "#00A087B2", "slateblue1" )) +
labs(colour = "Study type", x = "Longitude", y = "Latitude") +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 13, colour = "black"),
axis.title.x = element_text(size = 13, colour= "black", vjust= -4,
face = "bold"),
axis.title.y = element_text(size = 13, colour= "black", vjust = 3,
face = "bold"),
legend.position = c(0.15,0.3),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(fill = "NA"),
plot.margin = unit(rep(0.5,4), "lines")) +
#Add a scale bar
ggspatial::annotation_scale(
location = "bl", width_hint = 0.3,
bar_cols = c("grey30", "white")) +
# Add a north arrow
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(
fill = c("white","grey30")))
#Check the map.
g1
#Load or install the required packages.
if (!require(dplyr)){
install.packages('dplyr')
library(dplyr)
}
if (!require(ggplot2)){
install.packages('ggplot2')
library(ggplot2)
}
if (!require(grDevices)){
install.packages('grDevices')
library(grDevices)
}
if (!require(sf)){
install.packages('sf')
library(sf)
}
if (!require(rnaturalearth)){
install.packages('rnaturalearth')
library(rnaturalearth)
}
if (!require(rnaturalearthdata)){
install.packages('rnaturalearthdata')
library(rnaturalearthdata)
}
if (!require(ggspatial)){
install.packages('ggspatial')
library(ggspatial)
}
if (!require(rgeos)){
install.packages('rgeos')
library(rgeos)
}
if (!require(cowplot)){
install.packages('cowplot')
library(cowplot)
}
if (!require(tidyverse)){
install.packages('tidyverse')
library(tidyverse)
}
# First, let's import and check our data set.
sites <- read.csv("../Data/sites.csv", h= T, sep = ";")
class(sites)
str(sites)
head(sites)
tail(sites)
#Now, select the columns with the coordinates and study type.
sites_short <- sites %>%
dplyr::select(Latitude, Longitude, StudyType)
#Check the data.
head(sites_short)
#Load the world map from the mapdata package
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
#Plot the base map.
g1 <- ggplot(data = world) +
geom_sf(colour = "white", fill = "lightgray") +
coord_sf(xlim = c(-180, 180), ylim = c(-58,90), expand = FALSE) +
theme_bw() +
#Plot the sites
geom_point(data = sites_short, aes(x = Longitude, y = Latitude,
colour = StudyType),
alpha = 0.5, size = 2) +
#Customize the colors and labels
scale_color_manual(values = c("sienna1",  "#00A087B2", "slateblue1" )) +
labs(colour = "Study type", x = "Longitude", y = "Latitude") +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 13, colour = "black"),
axis.title.x = element_text(size = 13, colour= "black", vjust= -4,
face = "bold"),
axis.title.y = element_text(size = 13, colour= "black", vjust = 3,
face = "bold"),
legend.position = c(0.15,0.3),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(fill = "NA"),
plot.margin = unit(rep(0.5,4), "lines")) +
#Add a scale bar
ggspatial::annotation_scale(
location = "bl", width_hint = 0.3,
bar_cols = c("grey30", "white")) +
# Add a north arrow
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(
fill = c("white","grey30")))
#Check the map.
g1
View(sites)
#Now, select the columns with the coordinates and study type.
sites_short <- sites %>%
dplyr::select(Latitude, Longitude, StudyType)
#Check the data.
head(sites_short)
#Load the world map from the mapdata package
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
#Plot the base map.
g1 <- ggplot(data = world) +
geom_sf(colour = "white", fill = "lightgray") +
coord_sf(xlim = c(-180, 180), ylim = c(-58,90), expand = FALSE) +
theme_bw() +
#Plot the sites
geom_point(data = sites_short, aes(x = Longitude, y = Latitude,
colour = StudyType),
alpha = 0.5, size = 2) +
#Customize the colors and labels
scale_color_manual(values = c("sienna1",  "#00A087B2", "slateblue1" )) +
labs(colour = "Study type", x = "Longitude", y = "Latitude") +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 13, colour = "black"),
axis.title.x = element_text(size = 13, colour= "black", vjust= -4,
face = "bold"),
axis.title.y = element_text(size = 13, colour= "black", vjust = 3,
face = "bold"),
legend.position = c(0.15,0.3),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(fill = "NA"),
plot.margin = unit(rep(0.5,4), "lines")) +
#Add a scale bar
ggspatial::annotation_scale(
location = "bl", width_hint = 0.3,
bar_cols = c("grey30", "white")) +
# Add a north arrow
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(
fill = c("white","grey30")))
#Check the map.
g1
#Load or install the required packages.
if (!require(dplyr)){
install.packages('dplyr')
library(dplyr)
}
if (!require(ggplot2)){
install.packages('ggplot2')
library(ggplot2)
}
if (!require(grDevices)){
install.packages('grDevices')
library(grDevices)
}
if (!require(sf)){
install.packages('sf')
library(sf)
}
if (!require(rnaturalearth)){
install.packages('rnaturalearth')
library(rnaturalearth)
}
if (!require(rnaturalearthdata)){
install.packages('rnaturalearthdata')
library(rnaturalearthdata)
}
if (!require(ggspatial)){
install.packages('ggspatial')
library(ggspatial)
}
if (!require(rgeos)){
install.packages('rgeos')
library(rgeos)
}
if (!require(cowplot)){
install.packages('cowplot')
library(cowplot)
}
if (!require(tidyverse)){
install.packages('tidyverse')
library(tidyverse)
}
# First, let's import and check our data set.
sites <- read.csv("../Data/sites.csv", h= T, sep = ";")
class(sites)
str(sites)
head(sites)
tail(sites)
View(sites)
#Now, select the columns with the coordinates and study type.
sites_short <- sites %>%
dplyr::select(Latitude, Longitude, StudyType)
#Check the data.
head(sites_short)
#Load the world map from the mapdata package
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
#Plot the base map.
g1 <- ggplot(data = world) +
geom_sf(colour = "white", fill = "lightgray") +
coord_sf(xlim = c(-180, 180), ylim = c(-58,90), expand = FALSE) +
theme_bw() +
#Plot the sites
geom_point(data = sites_short, aes(x = Longitude, y = Latitude,
colour = StudyType),
alpha = 0.5, size = 2) +
#Customize the colors and labels
scale_color_manual(values = c("sienna1",  "#00A087B2", "slateblue1" )) +
labs(colour = "Study type", x = "Longitude", y = "Latitude") +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 13, colour = "black"),
axis.title.x = element_text(size = 13, colour= "black", vjust= -4,
face = "bold"),
axis.title.y = element_text(size = 13, colour= "black", vjust = 3,
face = "bold"),
legend.position = c(0.15,0.3),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(fill = "NA"),
plot.margin = unit(rep(0.5,4), "lines")) +
#Add a scale bar
ggspatial::annotation_scale(
location = "bl", width_hint = 0.3,
bar_cols = c("grey30", "white")) +
# Add a north arrow
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(
fill = c("white","grey30")))
#Check the map.
g1
# First, let's import and check our data set.
sites <- read.csv("../Data/sites.csv", h= T, sep = ";")
class(sites)
str(sites)
head(sites)
tail(sites)
View(sites)
#Now, select the columns with the coordinates and study type.
sites_short <- sites %>%
dplyr::select(Latitude, Longitude, StudyType)
#Check the data.
head(sites_short)
#Load the world map from the mapdata package
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
#Plot the base map.
g1 <- ggplot(data = world) +
geom_sf(colour = "white", fill = "lightgray") +
coord_sf(xlim = c(-180, 180), ylim = c(-58,90), expand = FALSE) +
theme_bw() +
#Plot the sites
geom_point(data = sites_short, aes(x = Longitude, y = Latitude,
colour = StudyType),
alpha = 0.5, size = 2) +
#Customize the colors and labels
scale_color_manual(values = c("sienna1",  "#00A087B2", "slateblue1" )) +
labs(colour = "Study type", x = "Longitude", y = "Latitude") +
theme(panel.grid = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 13, colour = "black"),
axis.title.x = element_text(size = 13, colour= "black", vjust= -4,
face = "bold"),
axis.title.y = element_text(size = 13, colour= "black", vjust = 3,
face = "bold"),
legend.position = c(0.15,0.3),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(fill = "NA"),
plot.margin = unit(rep(0.5,4), "lines")) +
#Add a scale bar
ggspatial::annotation_scale(
location = "bl", width_hint = 0.3,
bar_cols = c("grey30", "white")) +
# Add a north arrow
ggspatial::annotation_north_arrow(
location = "tr", which_north = "true",
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = ggspatial::north_arrow_fancy_orienteering(
fill = c("white","grey30")))
#Check the map.
g1
#Export the map as PNG image.
png("../Figure/study sites.png", res = 300,
width = 4000, height = 2000, unit = "px")
g1
dev.off()
#Pick the countries.
countries <- sites$Country
#Check the number of effect size values per country.
table(countries)
g2 <- ggplot(data.frame(countries), aes(x=countries)) +
labs( y = "Number of effect sizes", x = "Country") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(size = 8.5, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black", vjust =-3,
face = "bold"),
axis.title.y = element_text(size = 12, colour = "black", vjust = 3,
face = "bold"),
plot.margin = unit(c(1,1,1,1), "lines")) +
geom_bar(fill ="lightgray")
#Check the barplot.
g2
#Export the barplot as PNG image.
png("../Figure/effect sizes.png", res = 300,
width = 2000, height = 2000, unit = "px")
g2
dev.off()
#Export both plots together as a single PNG image.
png("../Figure/sites.png", res = 300,
width = 6500, height = 1800, unit = "px")
cowplot::plot_grid(g1, g2,  axis = "tb", rel_heights = c(1.5,0.5),
rel_widths = c(2,1.5), align = 'hv',
labels = c("A", "B"))
dev.off()
cowplot::plot_grid(g1, g2,  axis = "tb", rel_heights = c(1.5,0.5),
rel_widths = c(2,1.5), align = 'hv',
labels = c("A", "B"))
dev.off()
#select the lethal effects
let <- sites %>%
filter_all(any_vars(str_detect(., pattern = "Lethal effect")))
#Pick the countries.
countriesLet <- let$Country
#Check the number of effect size values per country.
table(countriesLet)
#plot
g3 <- ggplot(data.frame(countriesLet), aes(x=countriesLet)) +
labs( y = "Number of effect sizes", x = "Country") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black", vjust =-3,
face = "bold"),
axis.title.y = element_text(size = 12, colour = "black", vjust = 3,
face = "bold"),
plot.margin = unit(c(1,1,1,1), "lines")) +
geom_bar(fill ="lightgray")
#Check the barplot.
g3
#Export the barplot as PNG image.
png("../Figure/effect sizes lethal.png", res = 300,
width = 2000, height = 2000, unit = "px")
g3
dev.off()
sub <- sites %>%
filter_all(any_vars(str_detect(., pattern = "Sublethal effect")))
#Pick the countries.
countriesSub <- sub$Country
#Check the number of effect size values per country.
table(countriesSub)
#plot
g4 <- ggplot(data.frame(countriesSub), aes(x=countriesSub)) +
labs( y = "Number of effect sizes", x = "Country") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black", vjust =-3,
face = "bold"),
axis.title.y = element_text(size = 12, colour = "black", vjust = 3,
face = "bold"),
plot.margin = unit(c(1,1,1,1), "lines")) +
geom_bar(fill ="lightgray")
#Check the barplot.
g4
#Export the barplot as PNG image.
png("../Figure/effect sizes sublethal.png", res = 300,
width = 2000, height = 2000, unit = "px")
g4
dev.off()
conseq <- sites %>%
filter_all(any_vars(str_detect(.,
pattern="Consequences of pesticide application")))
#Pick the countries.
countriesConseq <- conseq$Country
#Check the number of effect size values per country.
table(countriesConseq)
#plot
g5 <- ggplot(data.frame(countriesConseq), aes(x=countriesConseq)) +
labs( y = "Number of effect sizes", x = "Country") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.text = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black", vjust =-3,
face = "bold"),
axis.title.y = element_text(size = 12, colour = "black", vjust = 3,
face = "bold"),
plot.margin = unit(c(1,1,1,1), "lines")) +
geom_bar(fill ="lightgray")
#Check the barplot.
g5
#Export the barplot as PNG image.
png("../Figure/effect sizes consequences.png", res = 300,
width = 2000, height = 2000, unit = "px")
g5
dev.off()
citation()
